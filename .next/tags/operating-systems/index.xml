<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Operating Systems on lemosep</title>
    <link>https://lemosep.com/tags/operating-systems/</link>
    <description>Recent content in Operating Systems on lemosep</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Sep 2024 09:54:48 -0300</lastBuildDate>
    <atom:link href="https://lemosep.com/tags/operating-systems/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding Concurrency</title>
      <link>https://lemosep.com/posts/concurrency_talk/</link>
      <pubDate>Fri, 06 Sep 2024 09:54:48 -0300</pubDate>
      <guid>https://lemosep.com/posts/concurrency_talk/</guid>
      <description>When working with multi-threaded programs, concurrency issues can lead do undefined behaviour and unpredictable results. If you&amp;rsquo;ve ever encountered strange behaviour in your programs e.g. a shared counter not reflecting the expected value, you might stick to the end of this post! Here, I&amp;rsquo;ll dive into the common pitfalls of concurrency.&#xA;What&amp;rsquo;s the Problem? Concurrency arises when multiple threads execute simutaneously and interact with shared data. A core issue in multi-threaded programming is how threads access and modify shared variables.</description>
    </item>
  </channel>
</rss>
